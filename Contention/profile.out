Total: 410 samples
     311  75.9%  75.9%      410 100.0% thread_list_operations
      15   3.7%  79.5%       47  11.5% SortedList_insert
      15   3.7%  83.2%       52  12.7% SortedList_lookup
      14   3.4%  86.6%       14   3.4% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
      13   3.2%  89.8%       13   3.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
      11   2.7%  92.4%       11   2.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
       5   1.2%  93.7%        5   1.2% _init
       4   1.0%  94.6%        4   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       4   1.0%  95.6%        4   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       4   1.0%  96.6%        4   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       4   1.0%  97.6%        4   1.0% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
       3   0.7%  98.3%        3   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       3   0.7%  99.0%        3   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       2   0.5%  99.5%        2   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       1   0.2%  99.8%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       1   0.2% 100.0%        1   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1714
       0   0.0% 100.0%      410 100.0% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%      410 100.0% start_thread
ROUTINE ====================== thread_list_operations in /u/cs/ugrad/aayush/111/Proj2B/lab2_list.c
   311    410 Total samples (flat / cumulative)
     .      .   53:         }
     .      .   54:         length+=current_length;
     .      .   55:     }
     .      .   56: }
     .      .   57: 
---
     .      .   58: void* thread_list_operations(void * elements_offset) {
     .      .   59:     int i;
     .      .   60:     SortedListElement_t *ptr;
     .      .   61:     int offset = * ((int *) elements_offset);
     .      .   62:     struct timespec lock_start;
     .      .   63:     struct timespec lock_end;
     .      .   64:     if (sync_flag) {
     .      .   65:         switch (add_mode[0]) {
     .      .   66:             case 'm':
     .      .   67:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .   68:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .   69:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .   70:                         fprintf(stderr, "Error getting start time\n");
     .      .   71:                         exit(1);
     .      .   72:                     }
     .      .   73:                     pthread_mutex_lock(&mutex_locks[list_index]);
     .      .   74:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .   75:                         fprintf(stderr, "Error getting end time\n");
     .      .   76:                         exit(1);
     .      .   77:                     }
     .      .   78:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .      .   79:                     SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .   80:                     pthread_mutex_unlock(&mutex_locks[list_index]);
     .      .   81:                 }
     .      .   82:                 pthread_mutex_lock(&mutex_locks[0]);
     .      .   83:                 length_wrapper();
     .      .   84:                 pthread_mutex_unlock(&mutex_locks[0]);
     .      .   85:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .   86:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .   87:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .   88:                         fprintf(stderr, "Error getting start time\n");
     .      .   89:                         exit(1);
     .      .   90:                     }
     .      .   91:                     pthread_mutex_lock(&mutex_locks[list_index]);
     .      .   92:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .   93:                         fprintf(stderr, "Error getting end time\n");
     .      .   94:                         exit(1);
     .      .   95:                     }
     .      .   96:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .      .   97:                     ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .   98:                     delete_wrapper(ptr);
     .      .   99:                     pthread_mutex_unlock(&mutex_locks[list_index]);
     .      .  100:                 }
     .      .  101:                 break;
     .      .  102:             case 's':
     .      .  103:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .  104:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  105:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .  106:                         fprintf(stderr, "Error getting start time\n");
     .      .  107:                         exit(1);
     .      .  108:                     }
   239    239  109:                     while(__sync_lock_test_and_set(&sync_locks[list_index], 1) == 1);
     .      .  110:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .  111:                         fprintf(stderr, "Error getting end time\n");
     .      .  112:                         exit(1);
     .      .  113:                     }
     .      .  114:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .     47  115:                     SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .  116:                     __sync_lock_release(&sync_locks[list_index]);
     .      .  117:                 }
     .      .  118:                 while(__sync_lock_test_and_set(&sync_locks[0], 1) == 1);
     .      .  119:                 length_wrapper();
     .      .  120:                 __sync_lock_release(&sync_locks[0]);
     .      .  121: 
     .      .  122:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .  123:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  124:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .  125:                         fprintf(stderr, "Error getting start time\n");
     .      .  126:                         exit(1);
     .      .  127:                     }
    72     72  128:                     while(__sync_lock_test_and_set(&sync_locks[list_index], 1) == 1);
     .      .  129:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .  130:                         fprintf(stderr, "Error getting end time\n");
     .      .  131:                         exit(1);
     .      .  132:                     }
     .      .  133:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .     52  134:                     ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .  135:                     delete_wrapper(ptr);
     .      .  136:                     __sync_lock_release(&sync_locks[list_index]);
     .      .  137:                 }
     .      .  138:                 break;
     .      .  139:          }
     .      .  140:     } else {
     .      .  141:         for (i = offset; i < num_iterations+offset; i++) {
     .      .  142:             int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  143:             SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .  144:         }
     .      .  145:         length_wrapper();
     .      .  146:         for (i = offset; i < num_iterations+offset; i++) {
     .      .  147:             int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  148:             ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .  149:             delete_wrapper(ptr);
     .      .  150:         }
     .      .  151:     }
     .      .  152:   return NULL;
     .      .  153: }
---
     .      .  154: 
     .      .  155: void randomly_initialize_lists(){
     .      .  156: 	srand((unsigned int) time(NULL));
     .      .  157: 	int i;
     .      .  158: 	for (i = 0; i < num_elements; i++){
ROUTINE ====================== thread_list_operations in /u/cs/ugrad/aayush/111/Proj2B/lab2_list.c
   311    410 Total samples (flat / cumulative)
     .      .   53:         }
     .      .   54:         length+=current_length;
     .      .   55:     }
     .      .   56: }
     .      .   57: 
---
     .      .   58: void* thread_list_operations(void * elements_offset) {
     .      .   59:     int i;
     .      .   60:     SortedListElement_t *ptr;
     .      .   61:     int offset = * ((int *) elements_offset);
     .      .   62:     struct timespec lock_start;
     .      .   63:     struct timespec lock_end;
     .      .   64:     if (sync_flag) {
     .      .   65:         switch (add_mode[0]) {
     .      .   66:             case 'm':
     .      .   67:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .   68:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .   69:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .   70:                         fprintf(stderr, "Error getting start time\n");
     .      .   71:                         exit(1);
     .      .   72:                     }
     .      .   73:                     pthread_mutex_lock(&mutex_locks[list_index]);
     .      .   74:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .   75:                         fprintf(stderr, "Error getting end time\n");
     .      .   76:                         exit(1);
     .      .   77:                     }
     .      .   78:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .      .   79:                     SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .   80:                     pthread_mutex_unlock(&mutex_locks[list_index]);
     .      .   81:                 }
     .      .   82:                 pthread_mutex_lock(&mutex_locks[0]);
     .      .   83:                 length_wrapper();
     .      .   84:                 pthread_mutex_unlock(&mutex_locks[0]);
     .      .   85:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .   86:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .   87:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .   88:                         fprintf(stderr, "Error getting start time\n");
     .      .   89:                         exit(1);
     .      .   90:                     }
     .      .   91:                     pthread_mutex_lock(&mutex_locks[list_index]);
     .      .   92:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .   93:                         fprintf(stderr, "Error getting end time\n");
     .      .   94:                         exit(1);
     .      .   95:                     }
     .      .   96:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .      .   97:                     ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .   98:                     delete_wrapper(ptr);
     .      .   99:                     pthread_mutex_unlock(&mutex_locks[list_index]);
     .      .  100:                 }
     .      .  101:                 break;
     .      .  102:             case 's':
     .      .  103:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .  104:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  105:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .  106:                         fprintf(stderr, "Error getting start time\n");
     .      .  107:                         exit(1);
     .      .  108:                     }
   239    239  109:                     while(__sync_lock_test_and_set(&sync_locks[list_index], 1) == 1);
     .      .  110:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .  111:                         fprintf(stderr, "Error getting end time\n");
     .      .  112:                         exit(1);
     .      .  113:                     }
     .      .  114:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .     47  115:                     SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .  116:                     __sync_lock_release(&sync_locks[list_index]);
     .      .  117:                 }
     .      .  118:                 while(__sync_lock_test_and_set(&sync_locks[0], 1) == 1);
     .      .  119:                 length_wrapper();
     .      .  120:                 __sync_lock_release(&sync_locks[0]);
     .      .  121: 
     .      .  122:                 for (i = offset; i < num_iterations+offset; i++) {
     .      .  123:                     int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  124:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_start) < 0) {
     .      .  125:                         fprintf(stderr, "Error getting start time\n");
     .      .  126:                         exit(1);
     .      .  127:                     }
    72     72  128:                     while(__sync_lock_test_and_set(&sync_locks[list_index], 1) == 1);
     .      .  129:                     if (clock_gettime(CLOCK_MONOTONIC, &lock_end) < 0) {
     .      .  130:                         fprintf(stderr, "Error getting end time\n");
     .      .  131:                         exit(1);
     .      .  132:                     }
     .      .  133:                     total_lock_time += 1000000000L * (lock_end.tv_sec - lock_start.tv_sec) + lock_end.tv_nsec - lock_start.tv_nsec;
     .     52  134:                     ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .  135:                     delete_wrapper(ptr);
     .      .  136:                     __sync_lock_release(&sync_locks[list_index]);
     .      .  137:                 }
     .      .  138:                 break;
     .      .  139:          }
     .      .  140:     } else {
     .      .  141:         for (i = offset; i < num_iterations+offset; i++) {
     .      .  142:             int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  143:             SortedList_insert(&list_heads[list_index], &elements_to_insert[i]);
     .      .  144:         }
     .      .  145:         length_wrapper();
     .      .  146:         for (i = offset; i < num_iterations+offset; i++) {
     .      .  147:             int list_index = *(elements_to_insert[i].key) % num_lists;
     .      .  148:             ptr = SortedList_lookup(&list_heads[list_index], elements_to_insert[i].key);
     .      .  149:             delete_wrapper(ptr);
     .      .  150:         }
     .      .  151:     }
     .      .  152:   return NULL;
     .      .  153: }
---
     .      .  154: 
     .      .  155: void randomly_initialize_lists(){
     .      .  156: 	srand((unsigned int) time(NULL));
     .      .  157: 	int i;
     .      .  158: 	for (i = 0; i < num_elements; i++){
